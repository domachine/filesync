#!/bin/bash

# This program listens on a directory for changes and applies them
# to another location.
# Copyright (C) 2010, 2011  Dominik Burgd√∂rfer <dominik.burgdoerfer@googlemail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


FILESYNC_EXE=filesync
RUN_DIR=

if [[ -f "$HOME/.filesyncrc" ]]; then
    . "$HOME/.filesyncrc"
elif [[ -f /etc/filesyncrc ]]; then
    . /etc/filesyncrc
fi


APP=$(basename "$0")

is_num()
{
    echo "$1" | egrep '^[0-9]+(\.[0-9]+)?$' &>/dev/null
    return $?
}

msg()
{
    echo "$APP: $@" >&2
}

check_run_dir()
{
    [[ -z $RUN_DIR ]] || return

    RUN_DIR="/tmp/filesync"

    [[ -d "/tmp/filesync" ]] || mkdir "/tmp/filesync"
}

setup_processes()
{
    check_run_dir

    local job
    local proc_dir
    local pid_file
    local log_file

    for job in ${JOBS[@]}; do
        proc_dir=$(mktemp -d "$RUN_DIR/fs.XXXXXX")
        pid_file="$proc_dir/pid"
        log_file="$proc_dir/log"

        if [[ $(type -t "$job") == function ]]; then
            "$job" | "$FILESYNC_EXE" --daemon \
                --conf-file - \
                --log-file "$log_file" \
                --pid-file "$pid_file"
        else
            "$FILESYNC_EXE" --daemon \
                --conf-file "$job" \
                --log-file "$log_file" \
                --pid-file "$pid_file"
        fi
    done
}


nocommand=true

while ! [[ -z "$1" ]]; do
    case "$1" in
        start)
            setup_processes
            nocommand=false
            ;;
        stop)
            check_run_dir
            if [[ -z "$2" ]]; then
                shift

                if [[ $(ls "$RUN_DIR"|wc -l) != 0 ]]; then
                    for i in "$RUN_DIR"/*; do
                        kill $(cat "$i/pid") && rm -r "$i"
                    done
                else
                    msg "No instances running."
                fi
            else
                kill "$2" && rm -r "$RUN_DIR/$2"
            fi
            nocommand=false
            ;;
        -c|--config)
            if [[ -z "$2" ]]; then
                msg "$1: Option requires an argument."
                exit 1
            else
                . "$2"
                shift
            fi
            ;;
        help)
            echo "Usage: $APP [-c, --config <CONFIG-FILE> start|stop|help"
            exit 0
            ;;
        *)
            msg "$1: Invalid argument." >&2
            ;;
    esac

    shift
done

# If no action chosen, assume `start'
if $nocommand; then
    setup_processes
fi
